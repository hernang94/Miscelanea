#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>

void crearServer(struct sockaddr_in* direccionServidor, int puerto) {
	direccionServidor->sin_family = AF_INET;
	direccionServidor->sin_addr.s_addr = INADDR_ANY;
	direccionServidor->sin_port = htons(puerto);
}

int main(void) {
	char* buffer = malloc(1000);
	struct sockaddr_in unServer;
	unServer.sin_family = AF_INET;
	unServer.sin_addr.s_addr = inet_addr("127.0.0.1");
	unServer.sin_port = htons(8200);

	struct sockaddr_in direccionServidor;

	crearServer(&direccionServidor, 8100);

	int servidor = socket(AF_INET, SOCK_STREAM, 0);

	int activado = 1;
	setsockopt(servidor, SOL_SOCKET, SO_REUSEADDR, &activado, sizeof(activado));

	if (bind(servidor, (void*) &direccionServidor, sizeof(direccionServidor))
			!= 0) {
		perror("Falló el bind");
		return 1;
	}

	printf("Estoy escuchando\n");
	listen(servidor, 100);

	//------------------------------

	struct sockaddr_in direccionCliente;
	unsigned int tamanioDireccion = sizeof(struct sockaddr_in);
	int cliente = accept(servidor, (void*) &direccionCliente,
			&tamanioDireccion);

	printf("Recibí una conexión en %d!!\n", cliente);

		int bytesRecibidos = recv(cliente, buffer, 1000, 0);
		if (bytesRecibidos <= 0) {
			perror("Se ha perdido contacto con la CPU");
			return 1;
		} else {
			buffer[bytesRecibidos] = '\0';
			printf("%s\n", buffer);
		}

	int umc_cliente = socket(AF_INET, SOCK_STREAM, 0);
	if (connect(umc_cliente, (void*) &unServer, sizeof(unServer)) != 0) {
		perror("Imposible conectar al SWAP");
		return 1;
	}

	send(umc_cliente,buffer , strlen(buffer), 0);

	free(buffer);

//------------------------------------------------------------

	return 0;
}

