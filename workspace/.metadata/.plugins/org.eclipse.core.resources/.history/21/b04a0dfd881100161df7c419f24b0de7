#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <commons/config.h>

void crearServer(struct sockaddr_in* direccionServidor, char* argumento) {
	t_config* cfgUMC = config_create(argumento);
	direccionServidor->sin_family = AF_INET;
	direccionServidor->sin_addr.s_addr = INADDR_ANY;
	direccionServidor->sin_port = htons(config_get_int_value(cfgUMC, "PUERTO_UMC"));
}

void crearCliente(struct sockaddr_in* direccionServidor, char* argumento) {
	t_config* cfgUMC = config_create(argumento);
	direccionServidor->sin_family = AF_INET;
	direccionServidor->sin_addr.s_addr = inet_addr(config_get_string_value(cfgUMC,"IP_SWAP"));
	direccionServidor->sin_port = htons(config_get_int_value(cfgUMC, "PUERTO_SWAP"));
}

void recibirCliente(struct sockaddr_in* direccionServidor, char* buffer){
	struct sockaddr_in direccionCliente;
		unsigned int tamanioDireccion = sizeof(struct sockaddr_in);

		int cliente = accept(direccionServidor, (void*) &direccionCliente,
				&tamanioDireccion);

		printf("Recibí una conexión del CPU de %d bytes \n", cliente);


		int bytesRecibidos = recv(cliente, buffer,
				sizeof("Recibí una conexión del CPU de %d bytes \n"), 0);

		if (bytesRecibidos <= 0) {
			perror("Se ha perdido contacto con la CPU");
			exit(0);

		} else {

			buffer[bytesRecibidos] = '\0';
			printf("Recibi de la CPU el mensaje: %s\n", buffer);
		}
}
int main(int argc, char* argv[]) {
	if (argc != 2) {
		printf("Cantidad Invalida de argumentos\n");
		return 1;
	}
	struct sockaddr_in unServer;
	char* buffer = malloc(50);
	struct sockaddr_in direccionServidor;
	crearServer(&direccionServidor, argv[1]);

	int servidor = socket(AF_INET, SOCK_STREAM, 0);

	int activado = 1;
	setsockopt(servidor, SOL_SOCKET, SO_REUSEADDR, &activado, sizeof(activado));

	if (bind(servidor, (void*) &direccionServidor, sizeof(direccionServidor))
			!= 0) {
		perror("Falló el bind");
		return 1;
	}

	printf("Estoy escuchando UMC\n");
	listen(servidor, 100);

	//------------------------------

	recibirCliente(servidor,&buffer);
	printf(buffer)

	printf("Esperando que se conecte el swap\n");

	crearCliente(&unServer, argv[1]);

	int umc_cliente = socket(AF_INET, SOCK_STREAM, 0);

	while (connect(umc_cliente, (void*) &unServer, sizeof(unServer))!= 0);


	send(umc_cliente, buffer, strlen(buffer), 0);
	printf("Mensaje enviado\n");
	free(buffer);
	while (1)
		;
	//------------------------------------------------------------

	return 0;
}

