#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <commons/config.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#define PORT "8100"

void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}


int crearServer(struct sockaddr_in* direccionServidor, char* argumento) {
	t_config* cfgUMC = config_create(argumento);

	direccionServidor->sin_family = AF_INET;
	direccionServidor->sin_addr.s_addr = INADDR_ANY;
	direccionServidor->sin_port = htons(
			config_get_int_value(cfgUMC, "PUERTO_UMC"));

	int servidor = socket(AF_INET, SOCK_STREAM, 0);

	int activado = 1;
	setsockopt(servidor, SOL_SOCKET, SO_REUSEADDR, &activado, sizeof(activado));

	return servidor;
}

void crearCliente(struct sockaddr_in* direccionServidor, char* argumento) {
	t_config* cfgUMC = config_create(argumento);
	direccionServidor->sin_family = AF_INET;
	direccionServidor->sin_addr.s_addr = inet_addr(
			config_get_string_value(cfgUMC, "IP_SWAP"));
	direccionServidor->sin_port = htons(
			config_get_int_value(cfgUMC, "PUERTO_SWAP"));
}

void recibirCliente(int servidor, char* buffer) {
	struct sockaddr_in direccionCliente;
	unsigned int tamanioDireccion = sizeof(struct sockaddr_in);

	int cliente = accept(servidor, (void*) &direccionCliente,
			&tamanioDireccion);

	printf("Recibí una conexión del CPU de %d bytes \n", cliente);

	int bytesRecibidos = recv(cliente, buffer,
			sizeof("Recibí una conexión del CPU de %d bytes \n"), 0);

	if (bytesRecibidos <= 0) {
		perror("Se ha perdido contacto con la CPU");
		exit(0);

	} else {

		buffer[bytesRecibidos] = '\0';
		printf("Recibi de la CPU el mensaje: %s\n", buffer);
	}
}
int main(int argc, char* argv[]) {
	if (argc != 2) {
		printf("Cantidad Invalida de argumentos\n");
		return 1;
	}
	struct sockaddr_in unServer;
	char* buffer = malloc(50);
	struct sockaddr_in direccionServidor;
	int servidor = crearServer(&direccionServidor, argv[1]);//Creo un SV y devuelvo el socket

	/*if (bind(servidor, (void*) &direccionServidor, sizeof(direccionServidor))
				!= 0) {
			perror("Falló el bind");
			return 1;
		}

	printf("Estoy escuchando UMC\n");
	listen(servidor, 100);
*/
	//-------------SELECT FEO-----------------


    fd_set master;    // master file descriptor list
    fd_set read_fds;  // temp file descriptor list for select()
    int fdmax;        // maximum file descriptor number

    int listener;     // listening socket descriptor
    int newfd;        // newly accept()ed socket descriptor
    struct sockaddr_storage remoteaddr; // client address
    socklen_t addrlen;

    char buf[256];    // buffer for client data
    int nbytes;

    char remoteIP[INET6_ADDRSTRLEN];

    int yes=1;        // for setsockopt() SO_REUSEADDR, below
    int i, j, rv;

    struct addrinfo hints, *ai, *p;

    FD_ZERO(&master);    // clear the master and temp sets
    FD_ZERO(&read_fds);

    // get us a socket and bind it
    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;
    if ((rv = getaddrinfo(NULL, PORT,hints, &ai)) != 0) {
        fprintf(stderr, "selectserver: %s\n", gai_strerror(rv));
        exit(1);
    }

    for(p = ai; p != NULL; p = p->ai_next) {
        servidor = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
        if (servidor < 0) {
            continue;
        }

        // lose the pesky "address already in use" error message
        setsockopt(servidor, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int));

        if (bind(servidor, (void*) &direccionServidor, sizeof(direccionServidor)) < 0) {
            close(servidor);
            continue;
        }

        break;
    }

    // if we got here, it means we didn't get bound
    if (p == NULL) {
        fprintf(stderr, "selectserver: failed to bind\n");
        exit(2);
    }

    freeaddrinfo(ai); // all done with this

    // listen
    if (listen(servidor, 10) == -1) {
        perror("listen");
        exit(3);
    }

    // add the listener to the master set
    FD_SET(servidor, &master);

    // keep track of the biggest file descriptor
    fdmax = servidor; // so far, it's this one

    // main loop
    for(;;) {
        read_fds = master; // copy it
        if (select(fdmax+1, &read_fds, NULL, NULL, NULL) == -1) {
            perror("select");
            exit(4);
        }

        // run through the existing connections looking for data to read
        for(i = 0; i <= fdmax; i++) {
            if (FD_ISSET(i, &read_fds)) { // we got one!!
                if (i == servidor) {
                    // handle new connections
                    addrlen = sizeof remoteaddr;
                    newfd = accept(servidor,
                        (struct sockaddr *)&remoteaddr,
                        &addrlen);

                    if (newfd == -1) {
                        perror("accept");
                    } else {
                        FD_SET(newfd, &master); // add to master set
                        if (newfd > fdmax) {    // keep track of the max
                            fdmax = newfd;
                        }
                        printf("selectserver: new connection from %s on "
                            "socket %d\n",
                            inet_ntop(remoteaddr.ss_family,
                                get_in_addr((struct sockaddr*)&remoteaddr),
                                remoteIP, INET6_ADDRSTRLEN),
                            newfd);
                    }
                } else {
                    // handle data from a client
                    if ((nbytes = recv(i, buf, sizeof buf, 0)) <= 0) {
                        // got error or connection closed by client
                        if (nbytes == 0) {
                            // connection closed
                            printf("selectserver: socket %d hung up\n", i);
                        } else {
                            perror("recv");
                        }
                        close(i); // bye!
                        FD_CLR(i, &master); // remove from master set
                    } else {
                        // we got some data from a client
                        for(j = 0; j <= fdmax; j++) {
                            // send to everyone!
                            if (FD_ISSET(j, &master)) {
                                // except the listener and ourselves
                                if (j != listener && j != i) {
                                    if (send(j, buf, nbytes, 0) == -1) {
                                        perror("send");
                                    }
                                }
                            }
                        }
                    }
                } // END handle data from client
            } // END got new incoming connection
        } // END looping through file descriptors
    } // END for(;;)--and you thought it would never end!






























































//-------------------------------------------------------------------------
	/*recibirCliente(servidor, buffer);

	printf("Esperando que se conecte el swap\n");

	crearCliente(&unServer, argv[1]);

	int umc_cliente = socket(AF_INET, SOCK_STREAM, 0);

	while (connect(umc_cliente, (void*) &unServer, sizeof(unServer)) != 0)
		;

	send(umc_cliente, buffer, strlen(buffer), 0);
	printf("Mensaje enviado\n");
	free(buffer);
	while (1)
		;*/
	//------------------------------------------------------------

	return 0;
}

